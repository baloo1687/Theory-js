//________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

//REACT: Hook, state, MOBX/REDUX, VIRTUAL DOM
//Что такое setState()?
/*
у каждого компанента в react js есть состояние которое хранит в себе какие-то данные и что бы их сохранить необходимо вызвать функцию setState()
Метод setState() следит за изменением состояния элемента, а состояние является обьектом и когда состояние меняется (когда вызвали функцию setState()) 
компонент рендерится повторно и мы видим в браузере обновленные данные, что позволяет нам не работать с DOM напрямую
*/

//Что такое Virtual DOM?
/*
Virtual DOM это копия оригинального DOM дерева и предназначено для того, что бы работать с данными напрямую, а не работать с DOM деревом.
При добавлении/изменении каких-то компонентов DOM и Virtual DOM сравниваются и выделяется разница и запускается ререндер только тех элементов которые были изменены. Такой подход - быстрее пеотому, что не включает в себя тяжелый операции работы над DOM
*/

//Как отрисовать массив элементов в React JS?
/*
Для этого мы пользуемся функцией .map внутри которой пишем jsx разметку
*/
const numbers = [1,2,3,4,5,6]

number.map((number) => 
    <li>{number}</li>
);

//Разница между контрилуремыми и не контролируемыми компонентами
/*
Контролируемый компонент - процесс изменения значения полностью под контролем разработчика, мы вручную перезаписываем значение!
*/
//Контролируемый компонент - внутри мы отслеживаем функцию onChange и вручную перезаписываем значение. 
function App() {
    const [value, setState] = setState('');
    const changeHandler = (e) => {
        setValue(e.target.value);
    }

    return (
        <div>
            <input type="text" value="{value}" onChange={() => changeHandler(e)}/>
        </div>
    )
}

//НЕ контролируемый компонент
function App() {
    const inputRef = useRef();
    
    const getInputRef = () => {
        return inputRef.current.value;
    }

    return (
        <div>
            <input type="text" ref={inputRef}/>
        </div>
    )
}

//Цикл жизни компонента и его методы
/*
1. Инициализация - компонент готови установку начального состояния и параметров по умолчанию
2. Монтирование - компонент реакт готов для монтирования в DOM
3. Обновление - компонент обновляется двумя способами - отправляя новые свойства и обновляя состояни.
4. Размонтирование - компонент не нужен и удаляется
*/

//Какие основные REACT HOOK вы знаете и какие используете
//Основные
useState();
/*
Подробнее про useState() и особенности использования
const [state, setState] = useState(initialState)
Функция возвращает 2 значения: state элемент - само состояние, setState - функция которая обновляет state. 
Во время первого рендера, значение состояния state ровняется значению которое передается в качестве первого аргумента (initialState).
setState обновляет значение состояния state, принимает новое значение и ставит в очередь повторный рендер компонента
*/
useEffect()

//Дополнительные
useContext();
useReducer();
useMemo();
useCallback();
useRef();
//etc.

//Что такое JSX?
// расширение языка которая упрощает восприятие кода и разработку

//Изначально использовался синтаксис React.createelement()
const element = React.createelement(
    'h1',
    {className: 'greeting'},
    'Привет мир'
)

//Сейчас используется
const newElement = (
    <div className="greeting">Привет мир</div>
)

//Что такое REDUX?
/*
Библиотека Redux — это способ управления состоянием приложения, менеджер состояний. Хотя в React есть собственный метод управления состояниями (почитать о нём можно в руководстве по React), он плохо масштабируется.
Redux идеально использовать в средних и крупных приложениях. Им стоит пользоваться только в случаях, когда невозможно управлять состоянием приложения с помощью стандартного менеджера состояний в React или любой другой библиотеке.
*/

//________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
